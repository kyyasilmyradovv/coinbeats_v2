paths:
  /api/v2/academies:
    get:
      tags: [Academies]
      description: Returns all academies list
      statuses: [404]
      parameters:
        - in: query
          name: keyword
          schema:
            type: string
          description: Search by name of the academies
        - in: query
          name: categoryId
          schema:
            type: integer
          description: Filter by category
        - in: query
          name: chainId
          schema:
            type: integer
          description: Filter by chain
      responses:
        '200':
          description: An array of objects which consist of academies information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Academy'
  #   post:
  #     tags: [Academies]
  #     description: Add new academy
  #     statuses: [400, 401, 404, 409]
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/AcademyInput'
  #     responses:
  #       '201':
  #         description: An object which consists newly created academy information
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/AcademyWithIncludes'
  /api/v2/academies/{id}:
    get:
      tags: [Academies]
      description: Fetch one academy details
      statuses: [401, 404]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Academy id
      responses:
        '200':
          description: An objects which consist of academy information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcademyWithIncludes'
  /api/v2/academies/{id}/content:
    get:
      tags: [Academies]
      description: Fetch academy content(questions)
      statuses: [401, 404]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Academy id
      responses:
        '200':
          description: An array of objects which consist of academy questions
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    question:
                      type: string
                    answer:
                      type: string
  #   put:
  #     tags: [Academies]
  #     description: Edit existing academy
  #     statuses: [400, 404, 409]
  #     parameters:
  #       - in: path
  #         name: uuid
  #         description: Academy uuid
  #         schema:
  #           type: string
  #           format: uuid
  #         required: true
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/AcademyEdit'
  #     responses:
  #       '200':
  #         description: Edited academy information
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Academy'
  #   delete:
  #     tags: [Academies]
  #     description: Delete academy
  #     statuses: [204, 400, 404, 409]
  #     parameters:
  #       - in: path
  #         name: uuid
  #         description: Academy uuid
  #         schema:
  #           type: string
  #           format: uuid
  #         required: true
  # /api/v2/academy/audio:
  #   post:
  #     tags: [Academies]
  #     description: Upload audio file for academy
  #     statuses: [400, 404, 409]
  #     parameters:
  #       - in: query
  #         name: academyUuid
  #         description: Academy uuid (if academy has not created yet, then dont need to pass this)
  #         schema:
  #           type: string
  #           format: uuid
  #     requestBody:
  #       content:
  #         application/octet-stream:
  #           schema:
  #             type: string
  #             format: binary
  #           description: Audio file input as a request body (audioBlob)
  #     responses:
  #       '200':
  #         description: Edited academy information
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/AcademyAudio'
  # /api/v2/academy/audio/{uuid}:
  #   delete:
  #     tags: [Academies]
  #     description: Delete academy
  #     statuses: [204, 400, 404, 409]
  #     parameters:
  #       - in: path
  #         name: uuid
  #         description: Audio uuid
  #         schema:
  #           type: string
  #           format: uuid
  #         required: true
