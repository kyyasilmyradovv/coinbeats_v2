generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskType {
  PLATFORM_SPECIFIC
  ACADEMY_SPECIFIC
}

enum IntervalType {
  ONETIME
  REPEATED
}

enum DisplayLocation {
  QUEST_TAB
  END_OF_ACADEMY
  GAMES_PAGE
  HOME_PAGE
  POINTS_PAGE
  OTHER
}

enum Platform {
  X
  YOUTUBE
  FACEBOOK
  INSTAGRAM
  TELEGRAM
  DISCORD
  EMAIL
  NONE
}

enum VerificationMethod {
  FOLLOW_USER
  TWEET
  RETWEET
  LIKE_TWEET
  COMMENT_ON_TWEET
  ADD_TO_BIO
  JOIN_TELEGRAM_CHANNEL
  INVITE_TELEGRAM_FRIEND
  INVITE_WITH_REFERRAL
  SUBSCRIBE_YOUTUBE_CHANNEL
  WATCH_YOUTUBE_VIDEO
  FOLLOW_INSTAGRAM_USER
  JOIN_DISCORD_CHANNEL
  PROVIDE_EMAIL
  SHORT_CIRCUIT
  LEAVE_FEEDBACK
  MEME_TWEET
}

model User {
  id                        Int                  @id @default(autoincrement())
  name                      String
  email                     String?              @unique
  password                  String?
  roles                     Role[]               @default([USER])
  createdAt                 DateTime             @default(now())
  updatedAt                 DateTime             @updatedAt
  telegramUserId            BigInt               @unique
  emailConfirmationToken    String?              @unique
  emailConfirmed            Boolean              @default(false)
  academies                 Academy[]
  points                    Point[]
  sessionLogs               SessionLog[]
  userResponses             UserResponse[]
  UserVerification          UserVerification[]
  bookmarkedAcademies       Academy[]            @relation("BookmarkedAcademies")
  referralCode              String?              @unique
  referredByUserId          Int?
  referralCompletionChecked Boolean              @default(true)
  referredBy                User?                @relation("UserReferrals", fields: [referredByUserId], references: [id])
  referrals                 User[]               @relation("UserReferrals")
  allowedAcademyTypes       AcademyType[]        @relation("UserAcademyTypes")
  userTaskSubmissions       UserTaskSubmission[]

  // New wallet address fields
  erc20WalletAddress  String?
  solanaWalletAddress String?
  tonWalletAddress    String?

  twitterAccount TwitterAccount[]

  // character level
  characterLevelId Int?
  characterLevel   CharacterLevel? @relation(fields: [characterLevelId], references: [id])
  Notification     Notification[]
}

model TwitterAccount {
  id                       Int       @id @default(autoincrement())
  user                     User      @relation(fields: [userId], references: [id])
  userId                   Int
  twitterUserId            String
  twitterUsername          String
  twitterAccessToken       String?
  twitterAccessTokenSecret String?
  twitterRefreshToken      String?
  twitterTokenExpiresAt    DateTime?
  connectedAt              DateTime  @default(now())
  disconnectedAt           DateTime?
}

model Academy {
  id               Int                @id @default(autoincrement())
  name             String
  creatorId        Int
  coingecko        String?
  congratsVideo    String?
  discord          String?
  getStarted       String?
  status           String
  teamBackground   String?
  telegram         String?
  ticker           String?
  twitter          String?
  webpageUrl       String?
  coverPhotoUrl    String?
  logoUrl          String?
  xp               Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  sponsored        Boolean            @default(false)
  contractAddress  String?
  tokenomics       Json?
  dexScreener      String?
  creator          User               @relation(fields: [creatorId], references: [id])
  academyQuestions AcademyQuestion[]
  points           Point[]            @relation("AcademyToPoint")
  quests           Quest[]
  raffles          Raffle[]
  subscription     Subscription?
  UserVerification UserVerification[]
  categories       Category[]         @relation("AcademyToCategory")
  chains           Chain[]            @relation("AcademyToChain")
  bookmarkedBy     User[]             @relation("BookmarkedAcademies")

  VerificationTask VerificationTask[]

  academyTypeId Int?
  academyType   AcademyType? @relation(fields: [academyTypeId], references: [id])
}

model Subscription {
  id         Int       @id @default(autoincrement())
  academyId  Int       @unique
  startDate  DateTime
  endDate    DateTime?
  active     Boolean   @default(false)
  monthlyFee Float
  academy    Academy   @relation(fields: [academyId], references: [id])
}

model SubscriptionSettings {
  id         Int     @id @default(autoincrement())
  enabled    Boolean @default(false)
  monthlyFee Float   @default(0.0)
}

model AcademyType {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  description      String?
  restricted       Boolean           @default(false)
  createdAt        DateTime          @default(now()) @db.Timestamp(6)
  updatedAt        DateTime          @default(now()) @updatedAt @db.Timestamp(6)
  initialQuestions InitialQuestion[] @relation("AcademyTypeQuestions")
  academies        Academy[]
  allowedUsers     User[]            @relation("UserAcademyTypes")
}

model InitialQuestion {
  id               Int               @id @default(autoincrement())
  question         String
  academyTypeId    Int
  academyQuestions AcademyQuestion[]
  academyType      AcademyType       @relation("AcademyTypeQuestions", fields: [academyTypeId], references: [id], onDelete: Cascade)
}

model Choice {
  id                Int             @id @default(autoincrement())
  text              String
  isCorrect         Boolean
  academyQuestionId Int
  academyQuestion   AcademyQuestion @relation(fields: [academyQuestionId], references: [id], onDelete: Cascade)
  userResponses     UserResponse[]
}

model UserResponse {
  id            Int     @id @default(autoincrement())
  userId        Int
  choiceId      Int
  isCorrect     Boolean
  pointsAwarded Int
  choice        Choice  @relation(fields: [choiceId], references: [id], onDelete: Cascade)
  user          User    @relation(fields: [userId], references: [id])
}

model AcademyQuestion {
  id                Int             @id @default(autoincrement())
  question          String
  academyId         Int
  answer            String?
  initialQuestionId Int
  quizQuestion      String
  xp                Int             @default(0)
  video             String?
  academy           Academy         @relation(fields: [academyId], references: [id])
  initialQuestion   InitialQuestion @relation(fields: [initialQuestionId], references: [id])
  choices           Choice[]
}

model Raffle {
  id        Int     @id @default(autoincrement())
  amount    Int
  reward    String
  currency  String
  chain     String
  dates     String
  totalPool Int
  academyId Int
  academy   Academy @relation(fields: [academyId], references: [id])
}

model Quest {
  id        Int     @id @default(autoincrement())
  name      String
  link      String
  platform  String
  academyId Int
  xp        Int     @default(0)
  academy   Academy @relation(fields: [academyId], references: [id])
}

model Point {
  id                 Int               @id @default(autoincrement())
  value              Int
  userId             Int
  academyId          Int?
  verificationTaskId Int?
  description        String?
  createdAt          DateTime          @default(now())
  academy            Academy?          @relation("AcademyToPoint", fields: [academyId], references: [id])
  user               User              @relation(fields: [userId], references: [id])
  verificationTask   VerificationTask? @relation(fields: [verificationTaskId], references: [id])
}

model SessionLog {
  id             Int      @id @default(autoincrement())
  userId         Int?
  sessionStart   DateTime
  sessionEnd     DateTime
  duration       Int
  routeDurations Json
  createdAt      DateTime @default(now())
  telegramUserId BigInt
  user           User?    @relation(fields: [userId], references: [id])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  academies Academy[] @relation("AcademyToCategory")
}

model Chain {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  academies Academy[] @relation("AcademyToChain")
}

model VerificationTask {
  id                  Int                  @id @default(autoincrement())
  name                String
  description         String?
  taskType            TaskType
  intervalType        IntervalType
  repeatInterval      Int?
  displayLocation     DisplayLocation
  platform            Platform?
  verificationMethod  VerificationMethod?
  xp                  Int                  @default(0)
  shortCircuit        Boolean              @default(false)
  shortCircuitTimer   Int?
  academyId           Int?
  academy             Academy?             @relation(fields: [academyId], references: [id])
  parameters          Json?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  Point               Point[]
  userVerification    UserVerification[]
  userTaskSubmissions UserTaskSubmission[]
}

model UserVerification {
  id                 Int              @id @default(autoincrement())
  userId             Int
  verificationTaskId Int
  academyId          Int?
  parameters         Json?
  verified           Boolean          @default(false)
  createdAt          DateTime         @default(now())
  completedAt        DateTime?
  pointsAwarded      Int              @default(0)
  lastLoginDate      DateTime?
  streakCount        Int              @default(1)
  academy            Academy?         @relation(fields: [academyId], references: [id])
  user               User             @relation(fields: [userId], references: [id])
  verificationTask   VerificationTask @relation(fields: [verificationTaskId], references: [id])
}

model UserTaskSubmission {
  id             Int      @id @default(autoincrement())
  userId         Int
  taskId         Int
  submissionText String
  createdAt      DateTime @default(now())
  processed      Boolean  @default(false) // New field

  user User             @relation(fields: [userId], references: [id])
  task VerificationTask @relation(fields: [taskId], references: [id])

  @@index([userId])
  @@index([taskId])
}

model CharacterLevel {
  id            Int      @id @default(autoincrement())
  levelName     String
  minPoints     Int
  maxPoints     Int
  rewardPoints  Int // Points awarded when reaching this level
  lottieFileUrl String? // URL or path to the Lottie animation file
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  User          User[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Setting {
  id    Int     @id @default(autoincrement())
  key   String  @unique
  value String?
}

enum Role {
  USER
  CREATOR
  ADMIN
  SUPERADMIN
}
