generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int                    @id @default(autoincrement())
  name                      String
  email                     String?                @unique
  password                  String?
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
  telegramUserId            BigInt                 @unique
  emailConfirmationToken    String?                @unique
  emailConfirmed            Boolean                @default(false)
  referralCode              String?                @unique
  referredByUserId          Int?
  roles                     Role[]                 @default([USER])
  referralCompletionChecked Boolean                @default(true)
  erc20WalletAddress        String?
  solanaWalletAddress       String?
  tonWalletAddress          String?
  characterLevelId          Int?
  raffleAmount              Int                    @default(0)
  academies                 Academy[]
  academyRaffleEntries      AcademyRaffleEntries[]
  Notification              Notification[]
  points                    Point[]
  raffles                   Raffle[]
  raffleWins                RaffleWinners[]
  sessionLogs               SessionLog[]
  surpriseBoxes             SurpriseBox[]
  twitterAccount            TwitterAccount[]
  characterLevel            CharacterLevel?        @relation(fields: [characterLevelId], references: [id])
  referredBy                User?                  @relation("UserReferrals", fields: [referredByUserId], references: [id])
  referrals                 User[]                 @relation("UserReferrals")
  userResponses             UserResponse[]
  userTaskSubmissions       UserTaskSubmission[]
  UserVerification          UserVerification[]
  bookmarkedAcademies       Academy[]              @relation("BookmarkedAcademies")
  allowedAcademyTypes       AcademyType[]          @relation("UserAcademyTypes")
  pointCount                BigInt?                @default(0)
  lastWeekPointCount        BigInt?                @default(0)
  registrationIp            String?
  registrationFingerprint   String?
  isBanned                  Boolean                @default(false)
}

model TwitterAccount {
  id                       Int       @id @default(autoincrement())
  userId                   Int
  twitterUserId            String
  twitterUsername          String
  twitterAccessToken       String?
  twitterAccessTokenSecret String?
  twitterRefreshToken      String?
  twitterTokenExpiresAt    DateTime?
  connectedAt              DateTime  @default(now())
  disconnectedAt           DateTime?
  user                     User      @relation(fields: [userId], references: [id])
}

model Academy {
  id               Int                @id @default(autoincrement())
  name             String
  creatorId        Int
  coingecko        String?
  congratsVideo    String?
  discord          String?
  getStarted       String?
  status           String
  teamBackground   String?
  telegram         String?
  ticker           String?
  twitter          String?
  webpageUrl       String?
  coverPhotoUrl    String?
  logoUrl          String?
  xp               Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  sponsored        Boolean            @default(false)
  contractAddress  String?
  tokenomics       Json?
  dexScreener      String?
  academyTypeId    Int?
  academyType      AcademyType?       @relation(fields: [academyTypeId], references: [id])
  creator          User               @relation(fields: [creatorId], references: [id])
  academyQuestions AcademyQuestion[]
  points           Point[]            @relation("AcademyToPoint")
  quests           Quest[]
  raffles          Raffle[]
  subscription     Subscription?
  UserVerification UserVerification[]
  VerificationTask VerificationTask[]
  categories       Category[]         @relation("AcademyToCategory")
  chains           Chain[]            @relation("AcademyToChain")
  bookmarkedBy     User[]             @relation("BookmarkedAcademies")
  pointCount       BigInt?            @default(0)
  rejectionReason  String?
  fomoNumber       Int?               @default(50)
  fomoXp           Int?               @default(1000)
  overallRaffle    OverallRaffle?
}

model Subscription {
  id         Int       @id @default(autoincrement())
  academyId  Int       @unique
  startDate  DateTime
  endDate    DateTime?
  active     Boolean   @default(false)
  monthlyFee Float
  academy    Academy   @relation(fields: [academyId], references: [id])
}

model SubscriptionSettings {
  id         Int     @id @default(autoincrement())
  enabled    Boolean @default(false)
  monthlyFee Float   @default(0.0)
}

model AcademyType {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  description      String?
  createdAt        DateTime          @default(now()) @db.Timestamp(6)
  updatedAt        DateTime          @default(now()) @updatedAt @db.Timestamp(6)
  restricted       Boolean           @default(false)
  academies        Academy[]
  initialQuestions InitialQuestion[] @relation("AcademyTypeQuestions")
  allowedUsers     User[]            @relation("UserAcademyTypes")
}

model InitialQuestion {
  id               Int               @id @default(autoincrement())
  question         String
  academyTypeId    Int
  academyQuestions AcademyQuestion[]
  academyType      AcademyType       @relation("AcademyTypeQuestions", fields: [academyTypeId], references: [id], onDelete: Cascade)
}

model Choice {
  id                Int             @id @default(autoincrement())
  text              String
  isCorrect         Boolean
  academyQuestionId Int
  academyQuestion   AcademyQuestion @relation(fields: [academyQuestionId], references: [id], onDelete: Cascade)
  userResponses     UserResponse[]
}

model UserResponse {
  id            Int     @id @default(autoincrement())
  userId        Int
  choiceId      Int
  isCorrect     Boolean
  pointsAwarded Int
  choice        Choice  @relation(fields: [choiceId], references: [id], onDelete: Cascade)
  user          User    @relation(fields: [userId], references: [id])
}

model AcademyQuestion {
  id                Int             @id @default(autoincrement())
  question          String
  academyId         Int
  answer            String?
  initialQuestionId Int
  quizQuestion      String
  xp                Int             @default(0)
  video             String?
  academy           Academy         @relation(fields: [academyId], references: [id])
  initialQuestion   InitialQuestion @relation(fields: [initialQuestionId], references: [id])
  choices           Choice[]
}

model Raffle {
  id        Int               @id @default(autoincrement())
  amount    Int               @default(0)
  academyId Int?
  createdAt DateTime          @default(now())
  desc      String?
  taskId    Int?
  userId    Int?
  academy   Academy?          @relation(fields: [academyId], references: [id])
  task      VerificationTask? @relation(fields: [taskId], references: [id])
  user      User?             @relation(fields: [userId], references: [id])
}

model Quest {
  id        Int     @id @default(autoincrement())
  name      String
  link      String
  platform  String
  academyId Int
  xp        Int     @default(0)
  academy   Academy @relation(fields: [academyId], references: [id])
}

model Point {
  id                 Int               @id @default(autoincrement())
  value              Int
  userId             Int
  academyId          Int?
  verificationTaskId Int?
  createdAt          DateTime          @default(now())
  description        String?
  academy            Academy?          @relation("AcademyToPoint", fields: [academyId], references: [id])
  user               User              @relation(fields: [userId], references: [id])
  verificationTask   VerificationTask? @relation(fields: [verificationTaskId], references: [id])
}

model SessionLog {
  id             Int      @id @default(autoincrement())
  userId         Int?
  sessionStart   DateTime
  sessionEnd     DateTime
  duration       Int
  routeDurations Json
  createdAt      DateTime @default(now())
  telegramUserId BigInt
  user           User?    @relation(fields: [userId], references: [id])
}

model Educator {
  id            Int           @id @default(autoincrement())
  name          String
  bio           String?
  avatarUrl     String?
  youtubeUrl    String?
  twitterUrl    String?
  telegramUrl   String?
  discordUrl    String?
  coverPhotoUrl String?
  logoUrl       String?
  contentOrigin ContentOrigin
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  webpageUrl    String?
  substackUrl   String?
  lessons       Lesson[]      @relation("EducatorLessons")
  categories    Category[]    @relation("EducatorCategories")
  chains        Chain[]       @relation("EducatorChains")
}

model Lesson {
  id         Int        @id @default(autoincrement())
  title      String
  contentUrl String
  type       LessonType
  xp         Int        @default(0)
  educatorId Int
  educator   Educator   @relation("EducatorLessons", fields: [educatorId], references: [id])
}

model Podcast {
  id            Int           @id @default(autoincrement())
  name          String
  description   String?
  spotifyUrl    String?
  appleUrl      String?
  youtubeUrl    String?
  coverPhotoUrl String?
  logoUrl       String?
  contentOrigin ContentOrigin
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  categories    Category[]    @relation("PodcastCategories")
  chains        Chain[]       @relation("PodcastChains")
}

model Tutorial {
  id            Int           @id @default(autoincrement())
  title         String
  contentUrl    String
  type          TutorialType
  xp            Int           @default(0)
  coverPhotoUrl String?
  description   String?
  logoUrl       String?
  contentOrigin ContentOrigin
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  categories    Category[]    @relation("TutorialCategories")
  chains        Chain[]       @relation("TutorialChains")
}

model YoutubeChannel {
  id            Int           @id @default(autoincrement())
  name          String
  description   String?
  youtubeUrl    String?
  coverPhotoUrl String?
  logoUrl       String?
  contentOrigin ContentOrigin
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  categories    Category[]    @relation("YoutubeChannelCategories")
  chains        Chain[]       @relation("YoutubeChannelChains")
}

model TelegramGroup {
  id            Int           @id @default(autoincrement())
  name          String
  description   String?
  telegramUrl   String?
  coverPhotoUrl String?
  logoUrl       String?
  contentOrigin ContentOrigin
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  categories    Category[]    @relation("TelegramGroupCategories")
  chains        Chain[]       @relation("TelegramGroupChains")
}

model Category {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  academies       Academy[]        @relation("AcademyToCategory")
  educators       Educator[]       @relation("EducatorCategories")
  podcasts        Podcast[]        @relation("PodcastCategories")
  tutorials       Tutorial[]       @relation("TutorialCategories")
  youtubeChannels YoutubeChannel[] @relation("YoutubeChannelCategories")
  telegramGroups  TelegramGroup[]  @relation("TelegramGroupCategories")
}

model Chain {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  academies       Academy[]        @relation("AcademyToChain")
  educators       Educator[]       @relation("EducatorChains")
  podcasts        Podcast[]        @relation("PodcastChains")
  tutorials       Tutorial[]       @relation("TutorialChains")
  youtubeChannels YoutubeChannel[] @relation("YoutubeChannelChains")
  telegramGroups  TelegramGroup[]  @relation("TelegramGroupChains")
}

model VerificationTask {
  id                  Int                  @id @default(autoincrement())
  description         String?
  createdAt           DateTime             @default(now())
  academyId           Int?
  displayLocation     DisplayLocation
  intervalType        IntervalType
  name                String
  repeatInterval      Int?
  shortCircuit        Boolean              @default(false)
  shortCircuitTimer   Int?
  taskType            TaskType
  updatedAt           DateTime             @updatedAt
  verificationMethod  VerificationMethod?
  xp                  Int                  @default(0)
  platform            Platform?
  parameters          Json?
  Point               Point[]
  raffles             Raffle[]
  userTaskSubmissions UserTaskSubmission[]
  userVerification    UserVerification[]
  academy             Academy?             @relation(fields: [academyId], references: [id])
}

model UserVerification {
  id                 Int              @id @default(autoincrement())
  userId             Int
  verificationTaskId Int
  academyId          Int?
  verified           Boolean          @default(false)
  createdAt          DateTime         @default(now())
  pointsAwarded      Int              @default(0)
  completedAt        DateTime?
  lastLoginDate      DateTime?
  streakCount        Int              @default(1)
  parameters         Json?
  shortCircuit       Boolean          @default(false)
  academy            Academy?         @relation(fields: [academyId], references: [id])
  user               User             @relation(fields: [userId], references: [id])
  verificationTask   VerificationTask @relation(fields: [verificationTaskId], references: [id])
}

model UserTaskSubmission {
  id             Int              @id @default(autoincrement())
  userId         Int
  taskId         Int
  submissionText String
  createdAt      DateTime         @default(now())
  processed      Boolean          @default(false)
  task           VerificationTask @relation(fields: [taskId], references: [id])
  user           User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([taskId])
}

model CharacterLevel {
  id            Int      @id @default(autoincrement())
  levelName     String
  minPoints     Int
  maxPoints     Int
  rewardPoints  Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lottieFileUrl String?
  User          User[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Setting {
  id    Int     @id @default(autoincrement())
  key   String  @unique
  value String?
}

model SurpriseBox {
  id                 Int  @id @default(autoincrement())
  userId             Int
  completedAcademies Int  @default(0)
  lastBox            Int  @default(0)
  nextBox            Int  @default(3)
  user               User @relation(fields: [userId], references: [id])
}

model OverallRaffle {
  id           Int                @id @default(autoincrement())
  minAmount    Int                @default(0)
  winnersCount Int                @default(0)
  deadline     DateTime?
  minPoints    Int?
  reward       String?
  academyId    Int?               @unique
  creatorId    Int?
  isActive     Boolean            @default(false)
  type         OverallRaffleType?
  academy      Academy?           @relation(fields: [academyId], references: [id])
}

model RafflesHistory {
  id              Int             @id @default(autoincrement())
  name            String?
  startDate       DateTime?       @db.Date
  endDate         DateTime?       @db.Date
  winnersCount    Int?
  minPoints       Int?
  minRaffles      Int?
  overallRaffleId Int?
  winners         RaffleWinners[]
}

model RaffleWinners {
  id            Int            @id @default(autoincrement())
  winningAmount String?
  raffleAmount  Int?
  userId        Int
  historyId     Int
  history       RafflesHistory @relation(fields: [historyId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
}

model AcademyRaffleEntries {
  id        Int  @id @default(autoincrement())
  amount    Int  @default(0)
  userId    Int
  academyId Int
  user      User @relation(fields: [userId], references: [id])

  @@unique([userId, academyId])
}


model Coins {
  id                    Int                       @id @default(autoincrement())
  name                  String                    @unique
  symbol                String
  image                 String?
  price                 Float?
  price_date            DateTime?
  fdv                   Float?
  market_cap            Float?
  market_cap_rank       Int?
  ath                   Float?
  ath_date              DateTime?
  atl                   Float?
  atl_date              DateTime?
  listed_date           String?
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  gecko_id              String?                     @unique
  coinranking_uuid      String?                     @unique
  contract_addresses    String[]
  view_count            Int?                        @default(0)
  homepage_links        String[]
  official_forum_urls   String[]   
  twitter_screen_name   String?
  price_change_1h       Float?
  price_change_24h      Float?
  price_change_7d       Float?
  price_change_14d      Float?
  price_change_30d      Float?
  price_change_1y       Float?
}

enum OverallRaffleType {
  PLATFORM
  ACADEMY
}

enum ContentOrigin {
  PLATFORM_BASED
  CREATOR_BASED
}

enum TaskType {
  PLATFORM_SPECIFIC
  ACADEMY_SPECIFIC
}

enum IntervalType {
  ONETIME
  REPEATED
}

enum DisplayLocation {
  QUEST_TAB
  END_OF_ACADEMY
  OTHER
  GAMES_PAGE
  HOME_PAGE
  POINTS_PAGE
}

enum Platform {
  X
  YOUTUBE
  FACEBOOK
  INSTAGRAM
  TELEGRAM
  DISCORD
  EMAIL
  NONE
  LINKEDIN
}

enum VerificationMethod {
  FOLLOW_USER
  TWEET
  RETWEET
  LIKE_TWEET
  ADD_TO_BIO
  JOIN_TELEGRAM_CHANNEL
  INVITE_TELEGRAM_FRIEND
  INVITE_WITH_REFERRAL
  SUBSCRIBE_YOUTUBE_CHANNEL
  WATCH_YOUTUBE_VIDEO
  FOLLOW_INSTAGRAM_USER
  JOIN_DISCORD_CHANNEL
  PROVIDE_EMAIL
  SHORT_CIRCUIT
  COMMENT_ON_TWEET
  LEAVE_FEEDBACK
  MEME_TWEET
  FOLLOW_LINKEDIN_USER
}

enum LessonType {
  YOUTUBE_VIDEO
  TWITTER_THREAD
  ARTICLE
}

enum TutorialType {
  WALLET_SETUP
  CEX_TUTORIAL
  APP_TUTORIAL
  RESEARCH_TUTORIAL
  OTHER
}

enum Role {
  USER
  CREATOR
  ADMIN
  SUPERADMIN
}
