generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                @id @default(autoincrement())
  name                   String
  email                  String?            @unique
  password               String?
  role                   Role               @default(USER)
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  telegramUserId         Int                @unique
  emailConfirmationToken String?            @unique
  emailConfirmed         Boolean            @default(false)
  academies              Academy[]
  points                 Point[]
  sessionLogs            SessionLog[]
  userResponses          UserResponse[]
  UserVerification       UserVerification[]
  bookmarkedAcademies    Academy[]          @relation("BookmarkedAcademies")
}

model Academy {
  id               Int                @id @default(autoincrement())
  name             String
  creatorId        Int
  coingecko        String?
  congratsVideo    String?
  discord          String?
  getStarted       String?
  status           String
  teamBackground   String?
  telegram         String?
  ticker           String
  twitter          String?
  webpageUrl       String?
  coverPhotoUrl    String?
  logoUrl          String?
  xp               Int                @default(200)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  sponsored        Boolean            @default(false)
  contractAddress  String?
  tokenomics       Json?
  dexScreener      String?
  creator          User               @relation(fields: [creatorId], references: [id])
  academyQuestions AcademyQuestion[]
  Point            Point[]
  quests           Quest[]
  raffles          Raffle[]
  subscription     Subscription?
  UserVerification UserVerification[]
  categories       Category[]         @relation("AcademyToCategory")
  chains           Chain[]            @relation("AcademyToChain")
  bookmarkedBy     User[]             @relation("BookmarkedAcademies")
}

model Subscription {
  id         Int       @id @default(autoincrement())
  academyId  Int       @unique
  startDate  DateTime
  endDate    DateTime?
  active     Boolean   @default(false)
  monthlyFee Float
  academy    Academy   @relation(fields: [academyId], references: [id])
}

model SubscriptionSettings {
  id         Int     @id @default(autoincrement())
  enabled    Boolean @default(false)
  monthlyFee Float   @default(0.0)
}

model AcademyType {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  description      String?
  createdAt        DateTime          @default(now()) @db.Timestamp(6)
  updatedAt        DateTime          @default(now()) @updatedAt @db.Timestamp(6)
  initialQuestions InitialQuestion[] @relation("AcademyTypeQuestions")
}

model InitialQuestion {
  id               Int               @id @default(autoincrement())
  question         String
  academyTypeId    Int
  academyQuestions AcademyQuestion[]
  academyType      AcademyType       @relation("AcademyTypeQuestions", fields: [academyTypeId], references: [id], onDelete: Cascade)
}

model Choice {
  id                Int             @id @default(autoincrement())
  text              String
  isCorrect         Boolean
  academyQuestionId Int
  academyQuestion   AcademyQuestion @relation(fields: [academyQuestionId], references: [id], onDelete: Cascade)
  userResponses     UserResponse[]
}

model UserResponse {
  id            Int     @id @default(autoincrement())
  userId        Int
  choiceId      Int
  isCorrect     Boolean
  pointsAwarded Int
  choice        Choice  @relation(fields: [choiceId], references: [id], onDelete: Cascade)
  user          User    @relation(fields: [userId], references: [id])
}

model AcademyQuestion {
  id                Int             @id @default(autoincrement())
  question          String
  academyId         Int
  answer            String?
  initialQuestionId Int
  quizQuestion      String
  xp                Int             @default(0)
  video             String?
  academy           Academy         @relation(fields: [academyId], references: [id])
  initialQuestion   InitialQuestion @relation(fields: [initialQuestionId], references: [id])
  choices           Choice[]
}

model Raffle {
  id        Int     @id @default(autoincrement())
  amount    Int
  reward    String
  currency  String
  chain     String
  dates     String
  totalPool Int
  academyId Int
  academy   Academy @relation(fields: [academyId], references: [id])
}

model Quest {
  id        Int     @id @default(autoincrement())
  name      String
  link      String
  platform  String
  academyId Int
  xp        Int     @default(0)
  academy   Academy @relation(fields: [academyId], references: [id])
}

model Point {
  id                 Int               @id @default(autoincrement())
  value              Int
  userId             Int
  academyId          Int?
  verificationTaskId Int?
  academy            Academy?          @relation(fields: [academyId], references: [id])
  user               User              @relation(fields: [userId], references: [id])
  verificationTask   VerificationTask? @relation(fields: [verificationTaskId], references: [id])
}

model SessionLog {
  id             Int      @id @default(autoincrement())
  userId         Int?
  sessionStart   DateTime
  sessionEnd     DateTime
  duration       Int
  routeDurations Json
  createdAt      DateTime @default(now())
  telegramUserId Int
  user           User?    @relation(fields: [userId], references: [id])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  academies Academy[] @relation("AcademyToCategory")
}

model Chain {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  academies Academy[] @relation("AcademyToChain")
}

model VerificationTask {
  id               Int                @id @default(autoincrement())
  platform         String
  description      String
  points           Int
  createdAt        DateTime           @default(now())
  Point            Point[]
  userVerification UserVerification[]
}

model UserVerification {
  id                 Int              @id @default(autoincrement())
  userId             Int
  verificationTaskId Int
  academyId          Int?
  verified           Boolean          @default(false)
  createdAt          DateTime         @default(now())
  pointsAwarded      Int              @default(0)
  academy            Academy?         @relation(fields: [academyId], references: [id])
  user               User             @relation(fields: [userId], references: [id])
  verificationTask   VerificationTask @relation(fields: [verificationTaskId], references: [id])
}

enum Role {
  USER
  CREATOR
  ADMIN
  SUPERADMIN
}
